<?php

namespace FreelancerTools\TimeTrackerBundle\Entity;

use FreelancerTools\CoreBundle\Entity\EntityRepository as Base;
use Doctrine\ORM\NoResultException;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends Base {

    public function getAllActive() {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('a,s')
                ->from('FreelancerToolsTimeTrackerBundle:Activity', 'a')
                ->leftJoin('a.timeslices', 's')
                ->andWhere('a.archived = false')
                ->addOrderBy('a.updatedAt', 'DESC')
        ;
        $q = $qb->getQuery();
        $result = $q->execute();
        return $result;
    }

    public function getSingleActivity($id) {
        //load all the data to limit number of queries
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('a,t,c,s,p')
                ->from('FreelancerToolsTimeTrackerBundle:Activity', 'a')
                ->leftJoin('a.service', 's')
                ->leftJoin('a.project', 'p')
                ->leftJoin('a.timeslices', 't')
                ->leftJoin('a.customer', 'c')
                ->andWhere('a.id = :activity')
                ->andWhere('t.invoiced = :invoiced')
                ->setParameters(array(
                    ':activity' => $id,
                    ':invoiced' => 0
        ));
        try {
            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

}
